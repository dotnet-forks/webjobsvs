<?xml version="1.0" encoding="utf-8"?>
<!--
***********************************************************************************************
ligershark.webjobs.targets

WARNING:  DO NOT MODIFY this file, this file is added to your project automatically
          through the WebJobsBuilder NuGet package. If you modify this file it may
          get out of sync when you update the package at a later date.

This file extends the publish process to enable support for WebJobs.

You can specify custom properties by creating the file:
  $(MSBuildProjectDirectory)\Properties\webjobs.props

Copyright (C) 2014. All rights reserved.
***********************************************************************************************
-->
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildProjectDirectory)\Properties\webjobs.props"
          Condition="Exists('$(MSBuildProjectDirectory)\Properties\webjobs.props')" />
  <Target Name="AfterBuild">
    <Message Text="wj-ExtendWebPublish: [$(wj-ExtendWebPublish)]" Importance="high"/>
  </Target>
  <PropertyGroup>
    <wj-ExtendWebPublish Condition=" '$(wj-ExtendWebPublish)'=='' ">true</wj-ExtendWebPublish>
    <wj-ExtensionTargetsPath Condition=" '$(wj-ExtensionTargetsPath)'=='' ">$(MSBuildThisFileDirectory)ligershark.webjobs.ext.targets</wj-ExtensionTargetsPath>    

    <CopyAllFilesToSingleFolderForPackageDependsOn>
      ls-AddWebJobFilesToPublish;
      $(CopyAllFilesToSingleFolderForPackageDependsOn);
    </CopyAllFilesToSingleFolderForPackageDependsOn>

    <OnAfterPipelinePreDeployCopyAllFilesToOneFolder>
      ls-AddWebJobFilesToPublish;
      $(OnAfterPipelinePreDeployCopyAllFilesToOneFolder);      
    </OnAfterPipelinePreDeployCopyAllFilesToOneFolder>
    
    <CopyAllFilesToSingleFolderForMsdeploy>
      ls-AddWebJobFilesToPublish;
      $(CopyAllFilesToSingleFolderForMsdeploy);
    </CopyAllFilesToSingleFolderForMsdeploy>

    <!-- For VS2012 -->
    <PipelineCopyAllFilesToOneFolderForMsdeployDependsOn>
      ls-AddWebJobFilesToPublish;
      $(PipelineCopyAllFilesToOneFolderForMsdeployDependsOn);      
    </PipelineCopyAllFilesToOneFolderForMsdeployDependsOn>

    <!-- Required for File System -->
    <PipelinePreDeployCopyAllFilesToOneFolderDependsOn>
      ls-AddWebJobFilesToPublish;
      $(PipelinePreDeployCopyAllFilesToOneFolderDependsOn);      
    </PipelinePreDeployCopyAllFilesToOneFolderDependsOn>
    <!-- required for FS support from the VS publish dialog -->
    <OnAfterCopyAllFilesToSingleFolderForPackage>
      ls-AddWebJobFilesToPublish;
      $(OnAfterCopyAllFilesToSingleFolderForPackage);      
    </OnAfterCopyAllFilesToSingleFolderForPackage>    
  </PropertyGroup>
  <ItemGroup>
    <_ls-WebJobsSourceFolers Include="App_Data\jobs\continuous\"/>
    <_ls-WebJobsSourceFolers Include="App_Data\jobs\triggered\"/>
  </ItemGroup>
  
  <!--
  In order to be a web job the following conditions must be met:
    1. There is a reference to the project
    2. There is at least 1 file as a part of the project under the path:
        - App_Data\jobs\<type>\<name>
       Where <type> is either continuous or triggered
       And <name> is the name of the project (without the extension)
       
   This target runs once per value in @(ProjectReference)
  -->
  <Target Name="ls-DiscoverWebJobs" 
          Outputs="%(ProjectReference.Identity)"
          DependsOnTargets="$(ls-DiscoverWebJobsDependsOn)">
    <Message Text="inside ls-DiscoverWebJobs" Importance="high"/>
    <!-- For this reference see if there is at least one file in the expected location -->
    <PropertyGroup>
      <_ls-projectfilename>%(ProjectReference.Filename)</_ls-projectfilename>
    </PropertyGroup>

    <Message Text="webjobs: considering ProjectReference [$(_ls-projectfilename)] as a webjob" Importance="low"/>
    <ItemGroup>
      <_ls-WebJobIndicator Remove="@(_ls-WebJobIndicator)"/>
    </ItemGroup>
       
    <FindUnderPath Files="@(Content);@(None);@(Resource);@(EmbeddedResource)" 
                   Path="%(_ls-WebJobsSourceFolers.Identity)$(_ls-projectfilename)">
      <Output TaskParameter="InPath" ItemName="_ls-WebJobIndicator"/>
    </FindUnderPath>

    <PropertyGroup>
      <_ls-iswebjob>false</_ls-iswebjob>
      <_ls-iswebjob Condition=" '@(_ls-WebJobIndicator)'!='' ">true</_ls-iswebjob>
    </PropertyGroup>
    <Message Text="webjobs: is [$(_ls-projectfilename)] a webjob?=[$(_ls-iswebjob)]" Importance="low" />
    
    <ItemGroup>
      <!-- If it's a webjob add it to the collection of items -->
      <ls-WebJobs Include="%(ProjectReference.Identity)" 
                  Condition=" '$(_ls-iswebjob)'=='true' " />
    </ItemGroup>
  </Target>
  <Target Name="ls-MessageForDiscoverWebJobs">
    <Message Text="webjobs: Looking for webjobs in the project" Importance="low"/>
  </Target>
  
  <PropertyGroup>
    <ls-DiscoverWebJobsDependsOn>
      $(ls-DiscoverWebJobsDependsOn);
      ls-MessageForDiscoverWebJobs
    </ls-DiscoverWebJobsDependsOn>
    <ls-AddWebJobFilesToPublishDependsOn>
      $(ls-AddWebJobFilesToPublishDependsOn);
      ResolveReferences;
      ResolveAssemblyReferences;
      ls-DiscoverWebJobs
    </ls-AddWebJobFilesToPublishDependsOn>  
  </PropertyGroup>
  <!--
  This target runs once per value in ls-WebJobs
  
  Outputs
    @(_ls-projectRefFiles)
    @(_ls-projOutputs)
  -->
  <Target Name="ls-AddWebJobFilesToPublish" 
          Outputs="%(ls-WebJobs.Identity)" 
          DependsOnTargets="$(ls-AddWebJobFilesToPublishDependsOn)"
          Condition=" '@(ls-WebJobs)'!='' ">
    <!-- 
    We need to determine what references need to be copied for the project.
    We can search through @(ReferenceCopyLocalPaths) for this.
    -->
    <ItemGroup>
      <_ls-tempProjFile Remove="@(_ls-tempProjFile)"/>
      <_ls-tempProjFile Include="%(ls-WebJobs.Identity)"/>
    </ItemGroup>

    <PropertyGroup>
      <_ls-projName>%(ls-WebJobs.Filename)</_ls-projName>
      <_ls-projFullPath>%(_ls-tempProjFile.FullPath)</_ls-projFullPath>
    </PropertyGroup>
    <ItemGroup>
      <_ls-projectRefFiles Remove="_ls-projectRefFiles"/>
      <!--<_ls-projectRefFiles  Include="@(ReferenceCopyLocalPaths)" />-->
      <_ls-projectRefFiles  Include="@(ReferenceCopyLocalPaths)"
                     Condition=" '%(ReferenceCopyLocalPaths.MSBuildSourceProjectFile)'=='$(_ls-projFullPath)' " />
    </ItemGroup>
    <Message Text="
ReferenceCopyLocalPaths: @(ReferenceCopyLocalPaths)
ReferenceDependencyPaths: @(ReferenceDependencyPaths)
ReferencePath: @(ReferencePath)
_ReferenceRelatedPaths: @(_ReferenceRelatedPaths)
ReferenceSatellitePaths: @(ReferenceSatellitePaths)
_ReferenceSerializationAssemblyPaths:@(_ReferenceSerializationAssemblyPaths)
_ReferenceScatterPaths: @(_ReferenceScatterPaths)
ReferenceCopyLocalPaths:@(ReferenceCopyLocalPaths)
             " Importance="high"/>
    <Message Text="webjobs: _ls-projName:$(_ls-projName)" Importance="low"/>
    <Message Text="webjobs: Reference files for publishing _ls-projectRefFiles: [@(_ls-projectRefFiles,'%0a%0d')]" Importance="low" />

    <!-- Get all the build outputs from the project -->
    <ItemGroup>
      <_ls-projOutputs Remove="@(_ls-projOutputs)"/>
    </ItemGroup>
    <Message Text="Getting project output: [$(_ls-projFullPath)]" Importance="high"/>
    <MSBuild Projects="$(_ls-projFullPath)" 
             Targets="BuiltProjectOutputGroup;DebugSymbolsProjectOutputGroup;SatelliteDllsProjectOutputGroup;ContentFilesProjectOutputGroup;SGenFilesOutputGroup">
      <Output ItemName="_ls-projOutputs" TaskParameter="TargetOutputs" />
    </MSBuild>

    <MSBuild Projects="$(_ls-projFullPath)"
             Targets="GetReferenceCopyLocalPaths" Properties="CustomBeforeMicrosoftCommonTargets=$(wj-ExtensionTargetsPath)">
      
      <Output ItemName="_ls-projOutputs" TaskParameter="TargetOutputs" />
    </MSBuild>   
    
    <Message Text="WebJobs: Output files for publishing [@(_ls-projOutputs->'%(Identity): TargetPath=[%(TargetPath)]','%0a%0d')]" Importance="high" />
    
    <!-- Now add these files to the correct item in order to have the published -->
    <ItemGroup>
      <!-- Add references from the project -->
      <FilesForPackagingFromProject Include="%(_ls-projectRefFiles.Identity)" 
                                    Condition="Exists('$(MSBuildProjectDirectory)\app_data\jobs\continuous\$(_ls-projName)')">
        <DestinationRelativePath>app_data\jobs\continuous\$(_ls-projName)\%(Filename)%(Extension)</DestinationRelativePath>
      </FilesForPackagingFromProject>
      <FilesForPackagingFromProject Include="%(_ls-projectRefFiles.Identity)"
                                    Condition="Exists('$(MSBuildProjectDirectory)\app_data\jobs\triggered\$(_ls-projName)')">
        <DestinationRelativePath>app_data\jobs\triggered\$(_ls-projName)\%(Filename)%(Extension)</DestinationRelativePath>
      </FilesForPackagingFromProject>

      <!-- Add outputs from the project -->
      <FilesForPackagingFromProject Include="%(_ls-projOutputs.Identity)" 
                                    Condition="Exists('$(MSBuildProjectDirectory)\app_data\jobs\continuous\$(_ls-projName)') and
                                    '%(_ls-projOutputs.TargetPath)' !='' ">
        <DestinationRelativePath>app_data\jobs\continuous\$(_ls-projName)\%(_ls-projOutputs.TargetPath)</DestinationRelativePath>
      </FilesForPackagingFromProject>
      <FilesForPackagingFromProject Include="%(_ls-projOutputs.Identity)"
                                    Condition="Exists('$(MSBuildProjectDirectory)\app_data\jobs\continuous\$(_ls-projName)') and
                                    '%(_ls-projOutputs.TargetPath)' =='' ">
        <DestinationRelativePath>app_data\jobs\continuous\$(_ls-projName)\%(_ls-projOutputs.FileName)%(_ls-projOutputs.Extension)</DestinationRelativePath>
      </FilesForPackagingFromProject>
      
      
      <FilesForPackagingFromProject Include="%(_ls-projOutputs.Identity)"
                                    Condition="Exists('$(MSBuildProjectDirectory)\app_data\jobs\triggered\$(_ls-projName)') and
                                               '%(_ls-projOutputs.TargetPath)' !='' ">
        <DestinationRelativePath>app_data\jobs\triggered\$(_ls-projName)\%(_ls-projOutputs.TargetPath)</DestinationRelativePath>
      </FilesForPackagingFromProject>
      <FilesForPackagingFromProject Include="%(_ls-projOutputs.Identity)"
                                    Condition="Exists('$(MSBuildProjectDirectory)\app_data\jobs\triggered\$(_ls-projName)') and
                                               '%(_ls-projOutputs.TargetPath)' =='' ">
        <DestinationRelativePath>app_data\jobs\triggered\$(_ls-projName)\%(_ls-projOutputs.FileName)%(_ls-projOutputs.Extension)</DestinationRelativePath>
      </FilesForPackagingFromProject>
    </ItemGroup>

    <Message Text="_ls-projectRefFiles: @(_ls-projectRefFiles)" Importance="high" />
    <Message Text="_ls-projOutputs: @(_ls-projOutputs)" Importance="high" />
    <Message Text="FilesForPackagingFromProject: @(FilesForPackagingFromProject)" Importance="high"/>
    <Message Text="FilesForPackagingFromProject-DestinationRelativePath [%(FilesForPackagingFromProject.Identity)]:%(FilesForPackagingFromProject.DestinationRelativePath)" Importance="high"/>
  </Target>

  
  <!-- This target should be moved into it's own isolated file -->
  <Target Name="GetReferenceCopyLocalPaths" Returns="@(ReferenceCopyLocalPaths)" DependsOnTargets="ResolveAssemblyReferences">
    <Message Text="ReferenceCopyLocalPaths: [@(ReferenceCopyLocalPaths)]" Importance="high"/>
  </Target>
  
</Project>